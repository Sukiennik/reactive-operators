buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.8"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id "io.morethan.jmhreport" version "0.9.0"
}
apply plugin: "me.champeau.gradle.jmh"


group 'pl.edu.agh.sukiennik.thesis'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

ext {
    groupModule = 'converting'.toString()
    buildDirVar = "build_${groupModule}".toString()
}

project.buildDir = "$rootDir/${buildDirVar}/"

repositories {
    maven { url 'https://repo.spring.io/snapshot' }
    mavenCentral()
}

dependencies {
    api 'org.reactivestreams:reactive-streams:1.0.3'

    implementation "io.reactivex.rxjava3:rxjava:3.0.3"
    implementation "com.github.akarnokd:rxjava3-extensions:3.0.0"

    implementation "io.projectreactor:reactor-core:3.3.5.RELEASE"
    implementation group: 'io.projectreactor.addons', name: 'reactor-extra', version: '3.3.3.RELEASE'

    implementation group: 'com.typesafe.akka', name: "akka-stream_2.12", version: '2.6.6'

    jmh project
    //jmhCompile 'org.openjdk.jmh:jmh-core:1.23'
    //jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.23'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    //jmh configurations.api
}


jmh {
    humanOutputFile = null
    resultsFile = project.file("${project.buildDir}/reports/jmh/${groupModule}_results.txt".toString())
    includeTests = false
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
    resultFormat = 'CSV' //'JSON'

    profilers=['pl.edu.agh.sukiennik.thesis.operators.ForcedGcMemoryProfiler']
    jvmArgs = ["-Djmh.ignoreLock=true"]
    // For Epsilon GC, add: "-Xmx12G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseEpsilonGC"
    // For Shenandoah, add: "-XX:+UseShenandoahGC" [optionally "-XX:+UnlockDiagnosticVMOptions", "-XX:ShenandoahGCHeuristics=passive"]
    // For Parallel GC, add: "-XX:+UseParallelGC"
    // For G1 GC, add: "-XX:+UseG1GC"
    // For ZGC, add: "-XX:+UnlockExperimentalVMOptions", "-XX:+UseZGC"
    // ---------------------------------------------------------------------------------------
    jvmArgsAppend = ["-XX:+UseParallelGC", "-Djmh.shutdownTimeout=1"]
    // ---------------------------------------------------------------------------------------\
    include = ["pl.edu.agh.sukiennik.thesis.operators.${groupModule}.*".toString()]
}

jmhReport {
    jmhResultPath = project.file("${buildDirVar}/reports/jmh/results.json")
    jmhReportOutput = project.file("${buildDirVar}/reports/jmh")
}

test {
    maxHeapSize = "2g"
}

task generatePlots(type: Exec) {
    commandLine 'python', 'plot.py'
}

//tasks.jmh.finalizedBy tasks.jmhReport
//tasks.jmhReport.finalizedBy tasks.generatePlots
